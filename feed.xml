<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-02-28T14:20:59-05:00</updated><id>/feed.xml</id><title type="html">CEKlopfenstein</title><subtitle>A place to show and post about personal projects and show examples of my work.</subtitle><entry><title type="html">Publication Day</title><link href="/ramblings/2022/02/28/Publication-day.html" rel="alternate" type="text/html" title="Publication Day" /><published>2022-02-28T00:00:00-05:00</published><updated>2022-02-28T00:00:00-05:00</updated><id>/ramblings/2022/02/28/Publication-day</id><content type="html" xml:base="/ramblings/2022/02/28/Publication-day.html">&lt;p&gt;Well it’s finally time to pull the trigger and replace the current placeholder in the GitHub repository with this. What the future holds no body knows. Especially in these times. But hey. You can’t fret over what you can’t control.&lt;/p&gt;

&lt;p&gt;Below is what I was using as a placeholder. It’s simple enough but I seriously spent too much time on it considering it was a placeholder.&lt;/p&gt;
&lt;div&gt;&lt;iframe src=&quot;/assets/place-holder/&quot; width=&quot;100%&quot; height=&quot;400px&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;Though I did end up fixing a few issues before it got moved here. The original version didn’t changed the box size. It was a static size. So if it was viewed on a phone it was the same dimensions as if it was viewed on a larger screen. It will also now adjusted the needed variables when the window is resized. Its done by simply restarting the whole script. But it works and I really need to stop putting more effort into something that was just to be a placeholder.&lt;/p&gt;</content><author><name></name></author><category term="ramblings" /><summary type="html">Well it’s finally time to pull the trigger and replace the current placeholder in the GitHub repository with this. What the future holds no body knows. Especially in these times. But hey. You can’t fret over what you can’t control.</summary></entry><entry><title type="html">README Generation Project Post 2</title><link href="/readme-generation-project/2022/02/22/README-Generation-Project2.html" rel="alternate" type="text/html" title="README Generation Project Post 2" /><published>2022-02-22T00:00:00-05:00</published><updated>2022-02-22T00:00:00-05:00</updated><id>/readme-generation-project/2022/02/22/README-Generation-Project2</id><content type="html" xml:base="/readme-generation-project/2022/02/22/README-Generation-Project2.html">&lt;p&gt;Well. Progress has been made while working on this project. Though not as much progress as I would have liked given It’s been nearly 2 months sense my last post on it. But progress has been made never the less.&lt;/p&gt;

&lt;h3 id=&quot;parallelization-of-retrieval-of-information&quot;&gt;Parallelization of retrieval of information.&lt;/h3&gt;
&lt;p&gt;As noted in my &lt;a href=&quot;/readme-generation-project/2021/12/23/README-Generation-Project.html&quot;&gt;last post&lt;/a&gt; on slower connections the program suffered. And through some informal testing I found that while I have little control of the speed of making a single request I do have control of the number of requests at once. This doesn’t seem to affect the speed of an individual request. But it can greatly increase how fast all the requests can be made and satisfied. This isn’t much of a surprise. As I had parallelized this process in a previous iteration of the project that is described in my last post. This was done using pthreads. Which was an interesting experience. This time around though I decided to use OpenMP to make the requests run in parallel. The reasoning behind this being purely because I saw examples of it in my Programming Language Design class and I wanted to try to use it. But I did not anticipate in an issue I had.&lt;/p&gt;
&lt;h4 id=&quot;issued-with-openmp&quot;&gt;Issued with OpenMP&lt;/h4&gt;
&lt;p&gt;The issue in question came when I was testing for memory leaks. And I found that for some reason I had a memory leak when I was using OpenMP. And thinking that there was no way for the library to be at fault I thought it was something I did. So I proceeded to spend a few hours pulling my hair out trying to find the source the memory leak that I clearly caused. But then I realized that if I removed OpenMP that it eliminated the memory leak. And so I did a little looking and found &lt;a href=&quot;https://medium.com/@auraham/pseudo-memory-leaks-when-using-openmp-11a383cc4cf9&quot;&gt;this article&lt;/a&gt; on the subject. It turns out that there is a pseudo memory leak that valgrind detects due to how OpenMP allocates itself memory. So that ended that hair pulling adventure.&lt;/p&gt;
&lt;h4 id=&quot;what-was-parallelized&quot;&gt;What Was Parallelized&lt;/h4&gt;
&lt;p&gt;Overall I ended up making two main things run in parallel within this project. Those being the retrieval of individual project’s descriptions and the retrieval of the links for the projects. These two tasks before they ran in parallel took the most amount of time. And while it can still take some time it is greatly improved. For example in one test I did without them running in parallel it took the whole program 1:26.83 to run. Where with them running in parallel it took 0:23.32. Which is 330% faster. And while it isn’t always that much of a difference it is more often than not faster. I also only tested this on my laptop which has 2 cores and 4 threads. So it’s possible that it will preform better on other computers. But at this point it works well enough. And from when I’ve tested on slower connections it still improves the time it takes for the program to execute.&lt;/p&gt;
&lt;h3 id=&quot;progress-indication&quot;&gt;Progress Indication&lt;/h3&gt;
&lt;p&gt;Another thing I did sense the last most was add a progress indicator. This was also mentioned in the &lt;a href=&quot;/readme-generation-project/2021/12/23/README-Generation-Project.html&quot;&gt;last post&lt;/a&gt; as something I wanted to do. And I must say it’s simple but I’m pleased with how it operates. It simply makes use of the carriage return to repeatedly overwrite the same line within the terminal. With each overwrite printing the name of the task being preformed, the progress bar and a counter of how many items have been processed and the total number of items that need to be processed.&lt;/p&gt;

&lt;p&gt;But due to some of the tasks being run in parallel it presents it’s own challenges. Which were solved in this case by making use of OpenMP’s critical section. In this case it protects a counter variable that increments the number of completed items and when that number is updated the progress indicator is printed.&lt;/p&gt;

&lt;p&gt;Once the progress indicator reaches it final value it then also adds the word DONE and prints a new line character to start the next line. It’s not the most fancy of progress indicators but it works well for what I’m doing. I also made it so I can make use of it else where if I want. With the size of the progress bar being adjustable using a single variable. The progress bar part of the indicator can also be disabled by setting that same variable to any number less than 1. Though I’m not sure how useful a progress bar with only one indicator section would be.&lt;/p&gt;
&lt;h4 id=&quot;example-of-progress-indicator&quot;&gt;Example of Progress Indicator&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;File exists
Getting repo names: 63 found
Getting descriptions [=========================] ( 63/ 63) DONE
Getting links [=========                ] ( 25/ 63)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;what-to-tackle-next&quot;&gt;What to Tackle Next&lt;/h3&gt;
&lt;p&gt;I still haven’t worked on everything I mentioned in the last post that I wanted to add to this program. Such as adding proper command line arguments and documentation. But I’d also like to make it so that the output is organized into categories or folders. But before I do that I think I’ll need to make some sort of config file to control and store that kind of information. Either way it should be at least something to work on. And the annoyances I mentioned in the &lt;a href=&quot;/readme-generation-project/2021/12/23/README-Generation-Project.html&quot;&gt;last post&lt;/a&gt; are mostly resolved now. So I’d call that a win.&lt;/p&gt;</content><author><name></name></author><category term="readme-generation-project" /><summary type="html">Well. Progress has been made while working on this project. Though not as much progress as I would have liked given It’s been nearly 2 months sense my last post on it. But progress has been made never the less.</summary></entry><entry><title type="html">Start of Spring of 2022 Semester</title><link href="/ramblings/2022/01/10/Well-time-for-spring-2022.html" rel="alternate" type="text/html" title="Start of Spring of 2022 Semester" /><published>2022-01-10T00:00:00-05:00</published><updated>2022-01-10T00:00:00-05:00</updated><id>/ramblings/2022/01/10/Well-time-for-spring-2022</id><content type="html" xml:base="/ramblings/2022/01/10/Well-time-for-spring-2022.html">&lt;p&gt;Well. As I am writing this it is less than 2 hour before my first class of for the Spring Semester of 2022. And what can I say? I’m as ready as I’ll ever be. In the coming weeks I’ll become engrossed again my classes. And likely working more on personal projects not necessarily because I have time but because I’ll get ideas and either from those classes or something else and I’ll want to do something with that idea before I forget it.&lt;/p&gt;

&lt;p&gt;What I really want to do though is continue work on my current projects such as my &lt;a href=&quot;/readme-generation-project/2021/12/23/README-Generation-Project.html&quot;&gt;README Generation Project&lt;/a&gt;. Which I have. Just not written anything much about. I also want to continue to work on this site. Even if it likely just become a blog about my projects and such.&lt;/p&gt;

&lt;p&gt;The only question is when I want actually publish this site and how. I’ll Likely use GitHub Pages and just make a git repository that just contains a copy of the _site folder. Might not be the best way to do this considering that GitHub will build using Jekyll automatically. But I feel it gives me more control. That and it prevents me from posting drafts acting as a staging area/airlock. I don’t know honestly and that’s part of the fun.&lt;/p&gt;</content><author><name></name></author><category term="ramblings" /><summary type="html">Well. As I am writing this it is less than 2 hour before my first class of for the Spring Semester of 2022. And what can I say? I’m as ready as I’ll ever be. In the coming weeks I’ll become engrossed again my classes. And likely working more on personal projects not necessarily because I have time but because I’ll get ideas and either from those classes or something else and I’ll want to do something with that idea before I forget it.</summary></entry><entry><title type="html">README Generation Project Post 1</title><link href="/readme-generation-project/2021/12/23/README-Generation-Project.html" rel="alternate" type="text/html" title="README Generation Project Post 1" /><published>2021-12-23T00:00:00-05:00</published><updated>2021-12-23T00:00:00-05:00</updated><id>/readme-generation-project/2021/12/23/README-Generation-Project</id><content type="html" xml:base="/readme-generation-project/2021/12/23/README-Generation-Project.html">&lt;h3 id=&quot;description-of-project&quot;&gt;Description of Project&lt;/h3&gt;
&lt;p&gt;This project is actually a smaller portion of what was originally a larger project I started in Spring of 2021. That original project was to allow me to have a terminal program that would allow me to manage to do lists that would be tied to the repositories I have on GitHub. Unfortunately I ran into feature creep. Preventing myself from getting any one feature that I wanted to work well. So that original project was abandoned. But only partially. Because I had written quite a bit for the features I wanted in that piece of software and because I still needed something to help manage my project. I decided to break the original project into smaller more manageable parts. And taking a page from the original Unix these parts will, if my plan comes together, will each be a separate program that can then be used along side the other parts with pipes and redirects to get the result I want. With this part being the first part that I decided to tackle sense it was the closest to completion.&lt;/p&gt;

&lt;p&gt;The general idea of this project is to generate a file in markdown format that lists the repositories that I have on GitHub along side other information. Such as the repositories description and a link to the repository itself. Other features I’ve had in mind is to allow the list to actually be somewhat organized into “folders” of sorts. One example being the fact that I have 12 repositories from one of my earlier classes that are all somewhat related to each other. All of those repositories would have their own “sub-list” allowing me to find what I’m looking for easier. Another feature is to allow it to actually just inject the generated markdown within a section found within the target file. Like how Jekyll uses a template and injects the content into that template at a set spot. This would then allow me to use the same file for notes on the projects in question.&lt;/p&gt;

&lt;h3 id=&quot;current-progress&quot;&gt;Current progress&lt;/h3&gt;
&lt;p&gt;As of today I have the injection portion of the project working and basic generation of the lists. With the list currently looking as follows.&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--START--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repo-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;repo-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;	-&lt;/span&gt; Repo description if it exists.
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--END--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!--START--&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!--END--&amp;gt;&lt;/code&gt; denoting the section to be replaced. At the moment this functionality is achieved using a temporary file. With the original contents of the file that the program is writing to being written to that file until the program comes across &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!--START--&amp;gt;&lt;/code&gt;. Once that happens it then injects the list into the temporary file and then writes whatever is found in the original file after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!--END--&amp;gt;&lt;/code&gt; to the temporary file. From there the file pointer to the original file is closed then reopened in write mode. With the contents of the temporary file then being written to it. If the target file doesn’t contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!--START--&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;!--END--&amp;gt;&lt;/code&gt; in the correct order it will simply append the markdown to be injected at the ended of the file. And if the target file doesn’t exist then the target file is then created with only the text to be injected.&lt;/p&gt;

&lt;p&gt;Overall it works. But if I am completely honest with myself though I could likely get the same results if I was to do with with an array or even a linked list instead of effectively writing the contents of the file twice. But at the moment it works.&lt;/p&gt;

&lt;h3 id=&quot;future-plans&quot;&gt;Future Plans&lt;/h3&gt;
&lt;p&gt;That being said the next part of the project is to organize the list itself. Though this will likely be after I fix a few annoyances. Like the fact that at the moment there is no real way of seeing the progress. As well as the fact that if the program is run on a slow network or on a GitHub account with a large number of repositories it can take a while because of the calls to get the information from using the API. This could easily be solved by running requests in parallel. But I still need to set that up.&lt;/p&gt;

&lt;p&gt;I also need to add documentation in the program as well. Currently it is run using the command line like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-gen &amp;lt;fileName.md&amp;gt;&lt;/code&gt; which works. But I could add more functionality with some other command line arguments. Which would help in with the goal of making it possible to use this program with other. It’s also possible for fileName.md to contain spaces if quotation marks are used. With them being replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; when actually accessing the target file to avoid possible issues with spaces and using the same file as a argument for other programs. This is not noted anywhere really. Giving even more reason for me to add documentation to the program. It would also give me practice with setting up Unix like flags.&lt;/p&gt;

&lt;p&gt;Either way more posts on this project are likely to come as this is one way for me to document progress and what I have already working. If anything it gives me a reason to set up a proper projects/project template for Jekyll.&lt;/p&gt;</content><author><name></name></author><category term="readme-generation-project" /><summary type="html">Description of Project This project is actually a smaller portion of what was originally a larger project I started in Spring of 2021. That original project was to allow me to have a terminal program that would allow me to manage to do lists that would be tied to the repositories I have on GitHub. Unfortunately I ran into feature creep. Preventing myself from getting any one feature that I wanted to work well. So that original project was abandoned. But only partially. Because I had written quite a bit for the features I wanted in that piece of software and because I still needed something to help manage my project. I decided to break the original project into smaller more manageable parts. And taking a page from the original Unix these parts will, if my plan comes together, will each be a separate program that can then be used along side the other parts with pipes and redirects to get the result I want. With this part being the first part that I decided to tackle sense it was the closest to completion.</summary></entry><entry><title type="html">Configuring Jekyll and First Post</title><link href="/jekyll/2021/12/21/configuring-jekyll.html" rel="alternate" type="text/html" title="Configuring Jekyll and First Post" /><published>2021-12-21T00:00:00-05:00</published><updated>2021-12-21T00:00:00-05:00</updated><id>/jekyll/2021/12/21/configuring-jekyll</id><content type="html" xml:base="/jekyll/2021/12/21/configuring-jekyll.html">&lt;p&gt;Working on setting up Jekyll to make my site. For future reference I’m saving this &lt;a href=&quot;https://matt.might.net/articles/what-cs-majors-should-know/&quot;&gt;link&lt;/a&gt;.
While it doesn’t actually document how to configure Jekyll it does contain links to a few examples of portfolios. The article that the link references also contains a few things that I actually want to look into. Fitting considering that it’s titled “What CS Majors Should Know.”&lt;/p&gt;

&lt;p&gt;If I’m completely honest with myself I’m not even sure about making this site public. I know
little when it comes to web site design with only a general working knowledge of HTML and CSS.
So my main goal is to at least make it presentable. But is that enough to prove I have any skill?
Or is that just impostor syndrome talking? Or am I just a prime example of Dunning-Kruger effect?
And just haven’t made the peak yet.&lt;/p&gt;

&lt;p&gt;Honestly I should have started this sooner. So I had more examples of early work to show
progress. But I guess hindsight is always 20/20.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><summary type="html">Working on setting up Jekyll to make my site. For future reference I’m saving this link. While it doesn’t actually document how to configure Jekyll it does contain links to a few examples of portfolios. The article that the link references also contains a few things that I actually want to look into. Fitting considering that it’s titled “What CS Majors Should Know.”</summary></entry></feed>